#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <mpi.h>

using namespace std;


struct Node {
    char data;
    int frequency;
    Node *left, *right;
};


struct Compare {
    bool operator()(Node* a, Node* b) {
        return a->frequency > b->frequency;
    }
};

Node* getNode(char data, int frequency, Node* left, Node* right) {
    Node* node = new Node;
    node->data = data;
    node->frequency = frequency;
    node->left = left;
    node->right = right;
    return node;
}

void generateCodes(Node* root, string code, unordered_map<char, string>& codes) {
    if (!root) {
        return;
    }
    if (root->data != '\0') {
        codes[root->data] = code;
    }
    generateCodes(root->left, code + "0", codes);
    generateCodes(root->right, code + "1", codes);
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int size, rank;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    ifstream inFile("input.txt");
    string input((istreambuf_iterator<char>(inFile)), istreambuf_iterator<char>());
    int inputSize = input.size();
    int bufferSize = inputSize / size + (inputSize % size != 0 ? 1 : 0);

    string buffer(bufferSize, '\0');
    MPI_Scatter(input.data(), bufferSize, MPI_CHAR, buffer.data(), bufferSize, MPI_CHAR, 0, MPI_COMM_WORLD);

    unordered_map<char, int> freq;
    for (char c : buffer) {
        freq[c]++;
    }

    unordered_map<char, int> globalFreq;
    MPI_Reduce(freq.data(), globalFreq.data(), freq.size(), MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    priority_queue<Node*, vector<Node*>, Compare> pq;
    for (auto it = globalFreq.begin(); it != globalFreq.end(); it++) {
        pq.push(getNode(it->first, it->second, nullptr, nullptr));
    }

    while (pq.size() > 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();
        int frequency = left->frequency + right->frequency;
        pq.push(getNode('\0', frequency, left, right));
    }

    Node* root = pq.top();

    unordered_map<char, string> codes;
    generateCodes(root, "", codes);

    for (int i = 0; i < size; i++) {
        if (i != rank) {
            MPI_Send(codes.data(), codes.size() * 2, MPI_CHAR, i, 0, MPI_COMM_WORLD);
        }
    }

    string encoded;
    for (char c : buffer) {
        encoded += codes[c];
    }

int* recvCounts = new int[size];
int* recvOffsets = new int[size];
MPI_Allgather(&bufferSize, 1, MPI_INT, recvCounts, 1, MPI_INT, MPI_COMM_WORLD);
recvOffsets[0] = 0;
for (int i = 1; i < size; i++) {
    recvOffsets[i] = recvOffsets[i - 1] + recvCounts[i - 1];
}
int totalSize = recvOffsets[size - 1] + recvCounts[size - 1];
char* recvData = new char[totalSize];
MPI_Allgatherv(encoded.data(), bufferSize, MPI_CHAR, recvData, recvCounts, recvOffsets, MPI_CHAR, MPI_COMM_WORLD);
if (rank == 0) {
    ofstream outFile("output.txt");
    outFile.write(recvData, totalSize);
    outFile.close();
}

MPI_Finalize();
return 0;
}
