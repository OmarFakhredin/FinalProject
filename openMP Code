#include <iostream>
#include <queue>
#include <map>
#include <string>
#include <chrono>
#include <omp.h>
using namespace std;
struct Node {
    char data;
    int freq;
    Node* left;
    Node* right;

    Node(char data, int freq) {
        this->data = data;
        this->freq = freq;
        left = right = NULL;
    }
    Node(char data, int freq, Node* left, Node* right) {
        this->data = data;
        this->freq = freq;
        this->left = left;
        this->right = right;
    }
    ~Node() {
        delete left;
        delete right;
    }
};

struct compare {
    bool operator()(Node* l, Node* r) {
        return (l->freq > r->freq);
    }
};
void generateCodes(Node* root, string str, map<char, string>& huffmanCode) {
    if (!root)
        return;

    if (root->data != '$')
        huffmanCode[root->data] = str;

    generateCodes(root->left, str + "0", huffmanCode);
    generateCodes(root->right, str + "1", huffmanCode);
}
#pragma omp declare reduction (merge : string : omp_out += omp_in) \
    initializer (omp_priv = "")
string huffmanCoding(string input) {
    map<char, int> freq;
    #pragma omp parallel for
    for (int i = 0; i < input.size(); i++) {
        #pragma omp atomic
        freq[input[i]]++;
    }
    priority_queue<Node*, vector<Node*>, compare> pq;
    for (auto pair : freq)
        pq.push(new Node(pair.first, pair.second));

    while (pq.size() != 1) {
        Node* left = pq.top();
        pq.pop();

        Node* right = pq.top();
        pq.pop();

        int sum = left->freq + right->freq;
        pq.push(new Node('$', sum, left, right));
    }

    Node* root = pq.top();
    map<char, string> huffmanCode;
    generateCodes(root, "", huffmanCode);

    string output = "";
    #pragma omp parallel for reduction(merge: output)
    for (int i = 0; i < input.size(); i++)
        output += huffmanCode[input[i]];

    delete root;
    return output;
}

int main() {
    string input = "hello world";    int num_threads = 1;
    omp_set_num_threads(num_threads);
    double start = omp_get_wtime(); 
    string compressed = huffmanCoding(input);
    cout << "Compressed: " << compressed << endl;
    double end  = omp_get_wtime();
    double elapsed = end - start;
    cout << "Time taken: " << elapsed << " seconds" << endl;
    return 0;
}
